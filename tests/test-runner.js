var webdriverio = require('webdriverio');
var resemble = require('node-resemble-js');
var fs = require('fs');	


// define term color for better readability
var termColorRed	= '\x1b[31m'
var termColorCyan	= '\x1b[36m'
var termColorReset = '\x1b[0m'
var termColorGreen = '\x1b[32m'

// Options
var options = {
	generateOriginals : false,
	browserName : "chrome",
	keepTmp : false,
	clearDirectories : false
}
var basenameTests = [];
var failedTests = [];


var displayInlineHelp = function(){
	console.log('Usage: test.js [options] file.json file2.json...');
	console.log('Test a four.js scene loading');
	console.log('');
	console.log('Options:');
	// TODO to be completed
	console.log('\t-h/--help	Display inline help');
	console.log('');
	console.log('\t-o/--generate-originals	Generate orinal images');
	console.log('');
	console.log('\t-s/--select	select specific tests (-s scene_cube)');
	console.log('');
	console.log('\t-b/--browser	pick browser (chrome default)');
	console.log('');
	console.log('\t-k/--keep-tmp	keep all the images generated by the test');
	console.log('');
	console.log('\t-c/--clear	Clear tmp and fail folders (without running test)');
}

// ----------------- Parse command line arguments
for(var i = 2; process.argv[i] !== undefined; i++){
	// assume any name do not start with ```-```
	// - if it does, up to the caller to add a ```./-``` in front
	if( process.argv[i][0] !== '-' ){
		var filename	= process.argv[i]
		var basename	= require('path').basename(filename, '.json');
		basenameTests.push( basename );
		continue
	}
	
	if( process.argv[i] === '-o' || process.argv[i] === '--generate-originals' ){
		options.generateOriginals = true;
		continue;
	}else if( process.argv[i] === '-s' ||  process.argv[i] === '--select' ){
		var specificTests = process.argv[++i].split(",");
		basenameTests = specificTests;
		continue;
	}else if( process.argv[i] === '-b' ||  process.argv[i] === '--browser' ){
		options.browserName = process.argv[++i];
		continue;
	}else if( process.argv[i] === '-k'  ||  process.argv[i] === '--keep-tmp'  ){
		options.keepTmp = true;
		continue;
	}else if( process.argv[i] === '-c'  ||  process.argv[i] === '--clear' ){
		options.clearDirectories = true;
		continue;
	}else if( process.argv[i] === '-h'  ||  process.argv[i] === '--help' ){
		displayInlineHelp();
		process.exit();
	}else {
		console.assert(false, 'unknown command option', process.argv[i])
		process.exit();
	}
}

if( basenameTests.length === 0 ){
	var defaultTestBasenames	= fs.readdirSync('scenes_json').map(function(filename){
		return filename.replace(/.json$/, '' );
	})
	basenameTests	= defaultTestBasenames;
}


// Initialize Browser for webdriver.io
var client = webdriverio.remote( {
	desiredCapabilities: {
		browserName: options.browserName
	}
}).init();


var testIndex = 0;


/**
 * Get screenshots of all the scenes
 * 
 * @param  {string} testBasename - name of the json stored in scenes_json folder
 */
var getScreenshots = function( testBasename ){
	var path = 'screenshots/tmp/';
	
	if( options.generateOriginals === true ) path = 'screenshots/originals/';
	
	// write new url in browser
	client
	.setViewportSize({ width: 574, height: 431})
	.url( 'http://127.0.0.1:8080/tests/test-runner.html#./scenes_json/' + testBasename + '.json' )
	.refresh()
	// limit time before moving on to the other function
	.timeoutsAsyncScript(50000)
	.executeAsync(function( done ) {
		// browser context - you may not access neither client nor console
		var interval = setInterval(function() {
			if(window.taskLoaded === true){
				clearInterval(interval);
				done();
			}
		}, 100);
	})
	// .then(function() {
	// 	console.log("Scene loaded");
	// })
	.saveScreenshot( path + testBasename + '.png' )
	.then(function(){
		// Call comparison function
		if( options.generateOriginals === false ){
			compareFile(testBasename);
		}else{
			// Save originals
			testIndex++;
			// when there is no more tests, handle termination
			if( testIndex === basenameTests.length ){
				console.log(termColorGreen+'All the screenshots are saved'+termColorReset);
				client.end();
				return
			}
			// handle next tests
			console.log(termColorGreen+'Screenshot for '+testBasename+' taken'+termColorReset);
			getScreenshots( basenameTests[testIndex] );
		}
	})
}


/**
 * Compare 2 images and output a difference
  * @param  {string} testBasename - name of the json stored in scenes_json folder
 */
var compareFile = function( testBasename ){
	var tmpName = 'screenshots/tmp/' + testBasename + '.png';
	var originalName = 'screenshots/originals/' + testBasename + '.png';
	var failsName = 'screenshots/fails/' + testBasename + '.png';
	var errorThreshold = 0.1;
	
	resemble( tmpName )
	.compareTo( originalName )
	.onComplete(function( data ){
		// output when done comparing
		if( data.misMatchPercentage >= errorThreshold ){
			failedTests.push({ name : testBasename, percentage: data.misMatchPercentage })
			// duplicate image that failed in the fails directory
			fs.linkSync(tmpName, failsName)
			console.log(termColorRed+'Failed : '+termColorCyan+testBasename+termColorRed+' - '+data.misMatchPercentage+'% different'+termColorReset)		
		}else{
			console.log(termColorGreen+'Passed : '+testBasename+' - '+data.misMatchPercentage+'% different'+termColorReset)
		}

		//  Increment testIndex to go to next item in array   
		testIndex++;
		if( testIndex < basenameTests.length ){
			getScreenshots( basenameTests[testIndex] );
		}else{
			endTest();
		}
	});
}

var endTest = function(){
	// When every array's member have been tested
	console.log("----------------- Summary -----------------")
	if(failedTests.length>0){
		console.log(termColorRed+failedTests.length+' of the '+basenameTests.length+' tests have failed'+termColorReset)
	}else{
		console.log(termColorGreen+'All of the '+basenameTests.length+' tests have passed'+termColorReset)
	}
	
	// Display Error
	failedTests.forEach(function(error){
		console.log(termColorRed+'Failed : '+termColorCyan+error.name+termColorRed+' - '+error.percentage+'% different'+termColorReset)
	});
	client.end();
	
	// Empty "screenshot/tmp" when tests are finished
	if(options.keepTmp === false){
		removeImageFiles('screenshots/tmp/')
	}
	
	// honor unix return code
	// NOTE: the setTimeout is a ugly way to wait for the browser to close
	setTimeout(function(){
		var failed = failedTests.length > 0 ? true : false;
		process.exit(failed ? 1 : 0 );
	}, 100);
}

/**
 * Remove image files
 * @param  {string} dirname - name of the directory
 */
var removeImageFiles = function(dirname){
	var filenames	= fs.readdirSync(dirname).filter(function(filename){
		return filename.match('.png$') ? true : false;
	})
	
	filenames.forEach(function(filename){
		var fullname	= require('path').join(dirname, filename);
		// console.log('removing', fullname)
		fs.unlinkSync(fullname);
	})
}

// Empty directory "screenshot/fails" then call function 
removeImageFiles('screenshots/fails/');

// Call function if not cleaning directories
if(options.clearDirectories === false){
	getScreenshots(basenameTests[0]);
}else{
	client.end();
	removeImageFiles('screenshots/tmp/');
	console.log(termColorGreen+'screenshots/fails/ and screenshots/tmp/ emptied'+termColorReset);
}

